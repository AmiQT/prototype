"""add_staff_id_to_user_table

Revision ID: 88e1b7d8560c
Revises: a6def3c4127b
Create Date: 2025-08-20 00:31:29.310903

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '88e1b7d8560c'
down_revision = 'a6def3c4127b'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('staff_id', sa.String(), nullable=True))
    
    # Handle enum type change properly for PostgreSQL
    # Check if user_role type already exists, if not create it
    op.execute("DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN CREATE TYPE user_role AS ENUM ('student', 'lecturer', 'admin'); END IF; END $$")
    
    # Only alter column if it's not already using user_role type
    op.execute("""
        DO $$ 
        BEGIN 
            IF EXISTS (SELECT 1 FROM information_schema.columns 
                      WHERE table_name = 'users' AND column_name = 'role' 
                      AND udt_name != 'user_role') THEN
                ALTER TABLE users ALTER COLUMN role TYPE varchar(20) USING role::varchar;
                DROP TYPE IF EXISTS userrole;
                ALTER TABLE users ALTER COLUMN role TYPE user_role USING role::user_role;
            END IF;
        END $$
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Handle enum type change properly for PostgreSQL
    op.execute("ALTER TABLE users ALTER COLUMN role TYPE varchar(20) USING role::varchar")
    op.execute("DROP TYPE IF EXISTS user_role")
    op.execute("CREATE TYPE userrole AS ENUM ('student', 'lecturer', 'admin')")
    op.execute("ALTER TABLE users ALTER COLUMN role TYPE userrole USING role::userrole")
    
    op.drop_column('users', 'staff_id')
    # ### end Alembic commands ###